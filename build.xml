<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--
build.xml

Copyright (c) 2014 Tune, Inc
All rights reserved.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

tune-reporting
Tune Reporting API SDK for Java 1.6
Incorporate Tune Reporting API services.
Update:  $Date: 2014-12-12 05:24:55 $
Version: 0.9.1
-->
<project basedir="."
	 default="build"
	 name="tune-reporting">
	<property name="src" value="src" />
	<property name="src.java" value="${src}/main" />
	<property name="classes.dir" value="classes"/>
	<property name="dist.dir" value="dist"/>
	<property name="major-version-number" value="1" />
	<property name="project-name" value="${ant.project.name}" />
	<property environment="env"/>
	<property name="junit.output.dir" value="junit"/>
	<property name="debuglevel" value="source,lines,vars"/>
	<property name="target" value="1.6"/>
	<property name="source" value="1.6"/>
	<property name="lint4j.level" value="3" />
	<property name="lint4j.exact" value="false" />

	<property name="dir.main" value="./src/main/java" />
	<property name="dir.test" value="./src/test/java" />
	<property name="dir.javadoc" value="./docs/javadoc" />
	<property name="dir.lib" value="./lib" />

	<property name="build.name" value="tune-reporting" />
	<property name="build.major.number" value="0" />
	<property name="build.minor.number" value="9" />
	<property name="build.revision.number" value="1" />

        <property name="javadoc.name" value="Tune Reporting API SDK for Java" />

	<path id="JUnit.libraryclasspath">
		<pathelement location="lib/junit-4.10.jar"/>
	</path>
	<path id="Tune_Reporting.classpath">
		<pathelement location="${classes.dir}"/>
		<pathelement location="lib/json-20131018.jar"/>
		<path refid="JUnit.libraryclasspath"/>
	</path>
	
	<target name="run">
		<echo message="ant.project.name=${ant.project.name}"/>
	</target>

	<target name="init">
		<mkdir dir="${classes.dir}"/>
		<mkdir dir="${dist.dir}"/>
		<copy includeemptydirs="false" todir="${classes.dir}">
			<fileset dir="${dir.main}" excludes="**/*.launch, **/*.java"/>
		</copy>
		<copy includeemptydirs="false" todir="${classes.dir}">
			<fileset dir="${dir.test}" excludes="**/*.launch, **/*.java"/>
		</copy>
	</target>
	<target name="clean">
		<delete dir="${dist.dir}"/>
		<delete dir="${classes.dir}"/>
		<delete file="Tune_Reporting.jar"/>
	</target>
	<target name="cleanall" depends="clean" />
	<target name="build" depends="cleanall,build-subprojects,build-project,compress,lint4j" />
	<target name="build-subprojects"/>
	<target name="compress" depends="build-project" >
		<echo message="${dist.dir}/${build.name}-${build.major.number}.${build.minor.number}.${build.revision.number}.jar" />
		<jar destfile="${dist.dir}/${build.name}-${build.major.number}.${build.minor.number}.${build.revision.number}.jar"
		     basedir="${classes.dir}"
		     excludes="**/*.java"
		     >
			<manifest>
				<attribute name="Product-Name" value="tune-reporting"/>
				<attribute name="Package-Title" value="com.tune.reporting"/>
				<attribute name="Package-Version" value="${build.major.number}.${build.minor.number}.${build.revision.number}"/>
				<attribute name="Specification-Title" value="Tune Reporting API SDK"/>
				<attribute name="Specification-Vendor" value="TUNE, Inc."/>
				<attribute name="Specification-Version" value="${build.major.number}.${build.minor.number}.${build.revision.number}"/>
				<attribute name="Implementation-Title" value="Tune Reporting API SDK"/>
				<attribute name="Implementation-Vendor" value="TUNE, Inc."/>
				<attribute name="Implementation-Vendor-Id" value="com.tune.reporting"/>
				<attribute name="Implementation-Version" value="${build.major.number}.${build.minor.number}.${build.revision.number}"/>
			</manifest>
		</jar>
	</target>
	<target name="build-project" depends="init">
		<echo message="${ant.project.name}: ${ant.file}" />
		<javac debug="true"
		       debuglevel="${debuglevel}"
		       destdir="${classes.dir}"
		       source="${source}"
		       target="${target}"
		       includeantruntime="false" >
			<src path="${dir.main}"/>
			<classpath refid="Tune_Reporting.classpath"/>
			<compilerarg value="-Xlint:all"/>
		</javac>
		<javac debug="true"
		       debuglevel="${debuglevel}"
		       destdir="${classes.dir}"
		       source="${source}"
		       target="${target}"
		       includeantruntime="false" >
			<src path="${dir.test}"/>
			<classpath refid="Tune_Reporting.classpath"/>
			<compilerarg value="-Xlint:all"/>
		</javac>
	</target>
	<target description="Build all projects which reference this project. Useful to propagate changes."
		name="build-refprojects"/>
	<target description="copy Eclipse compiler jars to ant lib directory"
		name="init-eclipse-compiler"
		>
		<copy todir="${ant.library.dir}">
			<fileset dir="${ECLIPSE_HOME}/plugins" includes="org.eclipse.jdt.core_*.jar"/>
		</copy>
		<unzip dest="${ant.library.dir}">
			<patternset includes="jdtCompilerAdapter.jar"/>
			<fileset dir="${ECLIPSE_HOME}/plugins" includes="org.eclipse.jdt.core_*.jar"/>
		</unzip>
	</target>
	<target description="compile project with Eclipse compiler"
		name="build-eclipse-compiler">
		<property name="build.compiler"
			  value="org.eclipse.jdt.core.JDTCompilerAdapter"/>
		<antcall target="build"/>
	</target>
	<!-- Run all example. -->
	<target name="example">
		<java classname="com.tune.reporting.examples.ExampleTuneManagementClient"
		      failonerror="true"
		      fork="yes">
			<classpath refid="Tune_Reporting.classpath"/>
			<arg value="${API_KEY}"/>
		</java>
		<java classname="com.tune.reporting.examples.ExampleAdvertiserReportActuals"
		      failonerror="true"
		      fork="yes">
			<classpath refid="Tune_Reporting.classpath"/>
			<arg value="${API_KEY}"/>	  <pathelement path="${tomcat5.src.path}/jakarta-tomcat-connectors/util/java" />

		</java>
		<java classname="com.tune.reporting.examples.ExampleAdvertiserReportClicks"
		      failonerror="true"
		      fork="yes">
			<classpath refid="Tune_Reporting.classpath"/>
			<arg value="${API_KEY}"/>
		</java>
		<java classname="com.tune.reporting.examples.ExampleAdvertiserReportCohort"
		      failonerror="true"
		      fork="yes">
			<classpath refid="Tune_Reporting.classpath"/>
			<arg value="${API_KEY}"/>
		</java>
		<java classname="com.tune.reporting.examples.ExampleAdvertiserReportEventItems"
		      failonerror="true" fork="yes">
			<classpath refid="Tune_Reporting.classpath"/>
			<arg value="${API_KEY}"/>
		</java>
		<java classname="com.tune.reporting.examples.ExampleAdvertiserReportEvents"
		      failonerror="true"
		      fork="yes">
		    <classpath refid="Tune_Reporting.classpath"/>
		    <arg value="${API_KEY}"/>
		</java>
		<java classname="com.tune.reporting.examples.ExampleAdvertiserReportInstalls"
		      failonerror="true"
		      fork="yes">
			<classpath refid="Tune_Reporting.classpath"/>
			<arg value="${API_KEY}"/>
		</java>
		<java classname="com.tune.reporting.examples.ExampleAdvertiserReportPostbacks"
		      failonerror="true"
		      fork="yes">
			<classpath refid="Tune_Reporting.classpath"/>
			<arg value="${API_KEY}"/>
		</java>
		<java classname="com.tune.reporting.examples.ExampleAdvertiserReportRetention"
		      failonerror="true"
		      fork="yes">
			<classpath refid="Tune_Reporting.classpath"/>
			<arg value="${API_KEY}"/>
		</java>
	</target>
	<!-- Run specific example. -->
	<target name="ExampleTuneManagementClient">
		<java classname="com.tune.reporting.examples.ExampleTuneManagementClient"
		      failonerror="true"
		      fork="yes">
			<classpath refid="Tune_Reporting.classpath"/>
			<arg value="${API_KEY}"/>
		</java>
	</target>
	<target name="ExampleItemsAccountUsers">
		<java classname="com.tune.reporting.examples.ExampleItemsAccountUsers"
		      failonerror="true"
		      fork="yes">
			<classpath refid="Tune_Reporting.classpath"/>
			<arg value="${API_KEY}"/>
		</java>
	</target>
	<target name="ExampleAdvertiserReportActuals">
		<java classname="com.tune.reporting.examples.ExampleAdvertiserReportActuals"
		      failonerror="true"
		      fork="yes">
			<classpath refid="Tune_Reporting.classpath"/>
			<arg value="${API_KEY}"/>
		</java>
	</target>
	<target name="ExampleAdvertiserReportClicks">
		<java classname="com.tune.reporting.examples.ExampleAdvertiserReportClicks"
		      failonerror="true" fork="yes">
			<classpath refid="Tune_Reporting.classpath"/>
			<arg value="${API_KEY}"/>
		</java>
	</target>
	<target name="ExampleAdvertiserReportCohort">
		<java classname="com.tune.reporting.examples.ExampleAdvertiserReportCohort"
		      failonerror="true" fork="yes">
			<classpath refid="Tune_Reporting.classpath"/>
			<arg value="${API_KEY}"/>
		</java>
	</target>
	<target name="ExampleAdvertiserReportEventItems">
		<java classname="com.tune.reporting.examples.ExampleAdvertiserReportEventItems"
		      failonerror="true" fork="yes">
			<classpath refid="Tune_Reporting.classpath"/>
			<arg value="${API_KEY}"/>
		</java>
	</target>
	<target name="ExampleAdvertiserReportEvents">
		<java classname="com.tune.reporting.examples.ExampleAdvertiserReportEvents"
		      failonerror="true" fork="yes">
			<classpath refid="Tune_Reporting.classpath"/>
			<arg value="${API_KEY}"/>
		</java>
	</target>
	<target name="ExampleAdvertiserReportInstalls">
		<java classname="com.tune.reporting.examples.ExampleAdvertiserReportInstalls"
		      failonerror="true"
		      fork="yes"
		      >
			<classpath refid="Tune_Reporting.classpath"/>
			<arg value="${API_KEY}"/>
		</java>
	</target>
	<target name="ExampleAdvertiserReportPostbacks">
		<java classname="com.tune.reporting.examples.ExampleAdvertiserReportPostbacks"
		      failonerror="true" fork="yes">
			<classpath refid="Tune_Reporting.classpath"/>
			<arg value="${API_KEY}"/>
		</java>
	</target>
	<target name="ExampleAdvertiserReportRetention">
		<java classname="com.tune.reporting.examples.ExampleAdvertiserReportRetention"
		      failonerror="true" fork="yes">
			<classpath refid="Tune_Reporting.classpath"/>
			<arg value="${API_KEY}"/>
		</java>
	</target>
	<!-- Run all unittest. -->
	<target name="test">
		<mkdir dir="${junit.output.dir}"/>
		<junit fork="no"
		       printsummary="on"
		       enabletestlistenerevents="true"
		       showoutput="true"
		       haltonfailure="yes"
		       >
			<sysproperty key="API_KEY" value="${API_KEY}"/>
			<classpath refid="Tune_Reporting.classpath"/>
			<formatter type="xml"/>
			<batchtest todir="${junit.output.dir}">
		        <fileset dir="${dir.test}">
		        	<include name="**/*Test*.java"/>
		        </fileset>
		    </batchtest>
		</junit>
	</target>
	<!-- Run specific unittest. -->
	<target name="TestTuneManagementClient">
		<mkdir dir="${junit.output.dir}"/>
		<junit showoutput="true"
		       printsummary="on"
		       enabletestlistenerevents="true"
		       fork="@{fork}"
		       forkmode="once"
		       haltonfailure="no"
		       timeout="1800000"
		       >
			<sysproperty key="API_KEY" value="${API_KEY}"/>
			<classpath refid="Tune_Reporting.classpath"/>
			<formatter type="xml"/>
			<test name="com.tune.reporting.TestTuneManagementClient" todir="${junit.output.dir}"/>
		</junit>
	</target>
	<target name="TestAdvertiserReportActuals">
		<mkdir dir="${junit.output.dir}"/>
		<junit showoutput="true"
		       printsummary="on"
		       enabletestlistenerevents="true"
		       fork="@{fork}"
		       forkmode="once"
		       haltonfailure="no"
		       timeout="1800000"
		       >
			<formatter type="xml"/>
			<test name="com.tune.reporting.TestAdvertiserReportActuals" todir="${junit.output.dir}"/>
			<classpath refid="Tune_Reporting.classpath"/>
			<sysproperty key="API_KEY" value="${API_KEY}"/>
		</junit>
	</target>
	<target name="TestAdvertiserReportClicks">
		<mkdir dir="${junit.output.dir}"/>
		<junit showoutput="true"
		       printsummary="on"
		       enabletestlistenerevents="true"
		       fork="@{fork}"
		       forkmode="once"
		       haltonfailure="no"
		       timeout="1800000">
			<formatter type="xml"/>
			<test name="com.tune.reporting.TestAdvertiserReportClicks" todir="${junit.output.dir}"/>
			<classpath refid="Tune_Reporting.classpath"/>
			<sysproperty key="API_KEY" value="${API_KEY}"/>
		</junit>
	</target>
	<target name="TestAdvertiserReportCohort">
		<mkdir dir="${junit.output.dir}"/>
		<junit showoutput="true"
		       printsummary="on"
		       enabletestlistenerevents="true"
		       fork="@{fork}"
		       forkmode="once"
		       haltonfailure="no"
		       timeout="1800000"
		       >
			<formatter type="xml"/>
			<test name="com.tune.reporting.TestAdvertiserReportCohort" todir="${junit.output.dir}"/>
			<classpath refid="Tune_Reporting.classpath"/>
			<sysproperty key="API_KEY" value="${API_KEY}"/>
		</junit>
	</target>
	<target name="TestAdvertiserReportEventItems">
		<mkdir dir="${junit.output.dir}"/>
		<junit showoutput="true"
		       printsummary="on"
		       enabletestlistenerevents="true"
		       fork="@{fork}"
		       forkmode="once"
		       haltonfailure="no"
		       timeout="1800000"
		       >
			<formatter type="xml"/>
			<test name="com.tune.reporting.TestAdvertiserReportEventItems" todir="${junit.output.dir}"/>
			<classpath refid="Tune_Reporting.classpath"/>
			<sysproperty key="API_KEY" value="${API_KEY}"/>
		</junit>
	</target>
	<target name="TestAdvertiserReportEvents">
		<mkdir dir="${junit.output.dir}"/>
		<junit showoutput="true"
		       printsummary="on"
		       enabletestlistenerevents="true"
		       fork="@{fork}"
		       forkmode="once"
		       haltonfailure="no"
		       timeout="1800000"
		       >
			<formatter type="xml"/>
			<test name="com.tune.reporting.TestAdvertiserReportEvents" todir="${junit.output.dir}"/>
			<classpath refid="Tune_Reporting.classpath"/>
			<sysproperty key="API_KEY" value="${API_KEY}"/>
		</junit>
	</target>
	<target name="TestAdvertiserReportInstalls">
		<mkdir dir="${junit.output.dir}"/>
		<junit showoutput="true"
		       printsummary="on"
		       enabletestlistenerevents="true"
		       fork="@{fork}"
		       forkmode="once"
		       haltonfailure="no"
		       timeout="1800000"
		       >
			<formatter type="xml"/>
			<test name="com.tune.reporting.TestAdvertiserReportInstalls" todir="${junit.output.dir}"/>
			<classpath refid="Tune_Reporting.classpath"/>
			<sysproperty key="API_KEY" value="${API_KEY}"/>
		</junit>
	</target>
	<target name="TestAdvertiserReportPostbacks">
		<mkdir dir="${junit.output.dir}"/>
		<junit showoutput="true"
		       printsummary="on"
		       enabletestlistenerevents="true"
		       fork="@{fork}"
		       forkmode="once"
		       haltonfailure="no"
		       timeout="1800000"
		       >
			<formatter type="xml"/>
			<test name="com.tune.reporting.TestAdvertiserReportPostbacks" todir="${junit.output.dir}"/>
			<classpath refid="Tune_Reporting.classpath"/>
			<sysproperty key="API_KEY" value="${API_KEY}"/>
		</junit>
	</target>
	<target name="TestAdvertiserReportRetention">
		<mkdir dir="${junit.output.dir}"/>
		<junit showoutput="true" printsummary="on"
		       enabletestlistenerevents="true"
		       fork="@{fork}" forkmode="once" haltonfailure="no" timeout="1800000">
			<formatter type="xml"/>
			<test name="com.tune.reporting.TestAdvertiserReportRetention" todir="${junit.output.dir}"/>
			<classpath refid="Tune_Reporting.classpath"/>
			<sysproperty key="API_KEY" value="${API_KEY}"/>
		</junit>
	</target>

	<target name="junitreport">
		<junitreport todir="${junit.output.dir}">
			<fileset dir="${junit.output.dir}">
				<include name="TEST-*.xml"/>
			</fileset>
			<report format="frames" todir="${junit.output.dir}"/>
		</junitreport>
	</target>
	<!-- Generate javadocs for current project into ${dir.javadoc} -->
	<target name="docs-javadoc" depends="init" description="Generate javadoc" >
		<mkdir dir="${dir.javadoc}"/>
		<javadoc use='true' author='true'  version='true'
                         overview="README.html"
                         sourcepath="${dir.main}"
                         destdir="${dir.javadoc}"
                         packagenames='*.*'
                         windowtitle='${javadoc.name} -- ${build.name}-${build.major.number}.${build.minor.number}.${build.revision.number}'
                         header='${javadoc.name} -- ${build.name}-${build.major.number}.${build.minor.number}.${build.revision.number}'
                         doctitle='${javadoc.name} -- ${build.name}-${build.major.number}.${build.minor.number}.${build.revision.number}'
                         linksource='true'
                         >
                    <classpath>
                        <fileset dir="${dir.lib}">
                            <include name="json-20131018.jar"/>
                        </fileset>
			<path location="${classes.dir}" />
                    </classpath>
                    <link href='http://java.sun.com/javase/6/docs/api/'/>
                </javadoc>
	</target>
	<taskdef name="lint4j"
		classname="com.jutils.lint4j.ant.Lint4jAntTask">
		<classpath><pathelement location="lib/lint4j/lint4j.jar"/></classpath>
	</taskdef>
	<target name="lint4j" description="Perform checks on Sources">
		<echo message="ant.project.name=${ant.project.name}"/>
		<echo message="dir.main=${dir.main}"/>
		<mkdir dir="build/lint"/>
		<lint4j packages="com.tune.reporting" level="${lint4j.level}" exact="${lint4j.exact}">
			<sourcepath>
				<dirset dir="${dir.main}">
					<include name="**/src/main/java" />
					<include name="**/src/test/java" />
				</dirset>
				<pathelement path="src/main/java/" />
			</sourcepath>
			<classpath>
				<fileset dir="${dist.dir}">
					<include name="**/*.jar" />
				</fileset>
				<fileset dir="lib">
					<include name="**/*.jar" />
				</fileset>
			</classpath>
			<formatters>
				<formatter type="text" />
				<formatter type="text" toFile="build/lint/tune_reporting.out"/>
				<formatter type="xml" toFile="build/lint/tune_reporting.xml"/>
			</formatters>
		</lint4j>
	</target>
	
	<taskdef resource="checkstyletask.properties"
		 classpath="lib/checkstyle/checkstyle-6.1.1-all.jar">
	</taskdef>
	<target name="checkstyle"
		description="Generates a report of code convention violations.">
		<mkdir dir="build/checkstyle"/>
	
		<checkstyle config="checkstyle/google_checks.xml"
			    failureProperty="checkstyle.failure"
			    failOnViolation="false">
			<formatter type="xml" tofile="build/checkstyle/checkstyle_report.xml"/>
			<classpath>
				<path location="${classes.dir}" />
			</classpath>
			<fileset dir="src/main/java" includes="**/*.java"/>
			<fileset dir="src/test/java" includes="**/*.java"/>
		</checkstyle>
	
	  <xslt in="build/checkstyle/checkstyle_report.xml"
		 out="build/checkstyle/checkstyle_report.html"
		 style="checkstyle/checkstyle-frames.xsl"/>
	
	</target>

</project>
